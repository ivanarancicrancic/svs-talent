.js code..... vo Main kade sto se poviukuva getPatientsAllCascade za verifikacija so securityToken:
 
Vo main kade sto se povikuva getPatientsAllCascade otkako prethodno kje se povika od Login stranata java script metodot SignUp() vo koj se povikuva i java script
 metodot register() vo koe se povikuva java metodot insertProvider() i posle sto ako se e ok se odi na stranata ActivationPage.js i posle isprakjanje sms so 
 activation kod se povikuva java metodot checkProviderActivationCode() vo koj isto taka go isprakjam i isprateniot securityToken koj se proveruva vo java 
 methodot posle sto dokolu se e vo red se odi na main glavnata strana na koja sto se prefrla toj securityToken od prethodnata strana preku 
"var securityToken = require('Modal/ActivationPage.js')" i na ovaa strana se povikuva java metodot getPatientsAllCascade so vlezen argument providerID 
i securityToken koi zaedno cinat VerificationToken pa zatoa na vlez na java metodot getPatientsAllCascade se prima VerificationToken object 
koj treba da se proveri dali postoi t.e. da li postoi zapis vo VerificationToken tabelata so toj providerID i so toa securityToken, i dokolku ne postoi 
voopsto zapis so toa providerID togas da se javi poraka deka korisnikot nema generirano voopsto token, a ako postoi zapis vo VerificationToken tabelata so toj
providerID ama so drugo securityToken togas da se javi poraka deka korisnikotne ne e tocno verifikuvan poradi pogresen vnes za securitytoken, a dokololku postoi
zapis so toj providerID i toj securityToken togas da se proveri da ne e istecen vekje tokenot i ako da se javi poraka deka mora da se registrira oddnovo za
da se generira nov validen securityToken za odnovo da se verificira, a dokolku e se vo red pominata e verifikacijata i togas moze da se prodolzi expiryTime 
na securityToken-ot vo bazata za novi 20 minuti. 

var Observable = require("FuseJS/Observable");
var activeUrl = require("Constants/SERVICE_URL.js");
var securityToken = require('Modal/ActivationPage.js');
 ////////////////
 
 register = {
        "providerID": providerID.value,
        "securityToken": securityToken.value; 
    }
    visibility1.value = "Visible";
    fetch(activeUrl.URL + "/curandusproject/webapi/api/patients/", {
        method: 'POST',
        headers: {
            "Content-type": "application/json"
        },
        dataType: 'json',
        body: JSON.stringify(register)
    }).then(function(response) {
        status = response.status; // Get the HTTP status code
        console.log('status', status);
        response_ok = response.ok; // Is response.status in the 200-range?
        return response.json(); // This returns a promise

    }).then(function(responseObject) {
        visibility1.value = "Visible";
        console.log("Success");
        var text = "The Activation code is: " + aCode;
        sendSms(phoneNumber.value, aCode);

        router.push("ActivationPage", {
            register: register
        });
        visibility1.value = "Collapsed";
    }).catch(function(err) {
        visibility1.value = "Collapsed";
        console.log("Error", err.message);
    });
	
///////////////////////////////////////////////////////////////////////////////////////////
	
.java code..... vo JSON.class

@POST
   @Path("/patients")
   @Consumes({MediaType.APPLICATION_JSON })
   @Produces("application/json")
   public String getPatientsAllCascade(VerificationToken securityToken) throws Exception 
	{
		System.out.println("init");
		List<PatientsCascade> t_items = null;
		String t_tems_str  = null;
		int providerId = securityToken.getProvider_id();
		String token = securityToken.getToken();
		
		try{
			ProjectManager projectManager= new ProjectManager();
			t_items = projectManager.getPatientsByProvider(providerId, token);
			//StringBuffer sb = new StringBuffer();
			Gson gson = new Gson();
			System.out.println(gson.toJson(t_items));
			t_tems_str = gson.toJson(t_items);

//			if (t_items.isEmpty()){
//				 throw new WebApplicationException(404);
//			}
//			else
//			{
				return t_tems_str;
			//}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			throw e;
		}		
	}
	
//////////////////////	
.java code..... vo ProjectManager.class
	public List<PatientsCascade> getPatientsByProvider(int PatientID, String securityToken) throws Exception {
		List<PatientsCascade> t_items= null;
		try {
		    Database database= new Database();
		    Connection connection = database.Get_Connection();
			Project project= new Project();
			project.getPatientsByProvider(connection, PatientID, securityToken);
	
	} catch (Exception e) {
		throw e;		
	}
		return t_items;
	}
	
///////////////////////////
.java code..... vo Project.class
public void getPatientsByProvider(Connection connection, int provider_id, String securityToken) throws Exception
	{    
		List<PatientsCascade> t_items = new ArrayList<PatientsCascade>();
		PreparedStatement ps=null;
			try
			{
                	VerificationToken found_token = GetVerificationToken(connection, PatientID);
				if (found_token.getToken().equals("NOTOKEN")){
					throw new Exception("User don't have a token! Must login/register to get new securityToken for validation.");
				}
				
				else {
				   System.out.println("ProviderID: " + provider_id);
				   System.out.println("Token entered:" + securityToken);
				   String checkSecurityTokenSQL = "SELECT * FROM verificationtoken WHERE verificationtoken.Token = '" + securityToken + "' AND verificationtoken.ProviderID = '" + provider_id + "'";
				   PreparedStatement preparedStatement= connection.prepareStatement(checkSecurityTokenSQL);    
				   ResultSet rs1 = preparedStatement.executeQuery();
				  // System.out.println("Found token: "+ rs1.next());
                     if (rs1.next()){
            	   System.out.println("Found token!");
                   System.out.println("Token verified for provider:" + provider_id);
		                            }
					else { throw new Exception("The entered token is not corresponding for the required user!");}				
				
					Calendar cal = Calendar.getInstance();
					Calendar cal1 = Calendar.getInstance();
					cal1.setTime(found_token.getExpiryDate());
					
					
					int expirationDay = cal1.get(Calendar.DAY_OF_YEAR);
					System.out.println("Expiration day of date: " + expirationDay);
					int currentDay = cal.get(Calendar.DAY_OF_YEAR);
					System.out.println("Current day of date: " + currentDay);
                    
					int currentHour = cal.get(Calendar.HOUR_OF_DAY);
					int currentMinute = cal.get(Calendar.MINUTE);
					int currentSecond = cal.get(Calendar.SECOND);
					
					Time expirationTime = found_token.getTime();
					System.out.println("Expiration time: " + expirationTime);
					cal1.setTime(expirationTime);
					int expirationHour = cal1.get(Calendar.HOUR_OF_DAY);
					int expirationMinute = cal1.get(Calendar.MINUTE);
					int expirationSecond = cal1.get(Calendar.SECOND);
					System.out.println("Expiration time: " + expirationHour +":"+expirationMinute+":"+expirationSecond);
					System.out.println("Current time: " + currentHour+":"+currentMinute+":"+currentSecond);
				//	if((found_token.getExpiryDate().getTime() - cal.getTime().getTime()) <= 0)
					
					int leftDays = expirationDay - currentDay;
					if(leftDays>=0)
					System.out.println("Left days until expiration:" + leftDays);
				    int leftHours = (expirationDay - currentDay)*24 + (expirationHour - currentHour); 
					if(leftHours>=0)
				    System.out.println("Left hours until expiration:" + leftHours);
					int leftMinutes = (((expirationDay - currentDay)*24 + (expirationHour - currentHour))*60 + (expirationMinute-currentMinute));
					if(leftMinutes>=0)
					System.out.println("Left minutes until expiration:" + leftMinutes);
					int leftSeconds = ((((expirationDay - currentDay)*24 + (expirationHour - currentHour))*60 + (expirationMinute-currentMinute))*60 + (expirationHour - currentHour));
					if(leftSeconds>=0)
					System.out.println("Left seconds until expiration:" + leftSeconds);
					
					
					if(expirationDay - currentDay < 0) {
					
					throw new Exception("Token invalid due to day expiration! User must login/register again to get new securityToken for further validation.");	
					}
					
					else if((expirationDay == currentDay) && (expirationHour - currentHour < 0))
					{
						throw new Exception("Token invalid due to hour expiration! User must login/register again to get new securityToken for further validation.");	
					}
					
					else if(((expirationDay == currentDay) && (expirationHour == currentHour)) && expirationMinute - currentMinute < 0) {
						throw new Exception("Token invalid due to minute expiration! User must login/register again to get new securityToken for further validation.");	
					}
					
					else if((expirationDay == currentDay) && (expirationHour == currentHour) && expirationMinute == currentMinute && expirationSecond - currentSecond < 0) {
						throw new Exception("Token invalid due to seconds expiration! User must login/register again to get new securityToken for further validation.");	
					}
					
					
				}
				System.out.println("Token verification passed!");
				
				//String uname = request.getParameter("uname");
				//PreparedStatement ps = connection.prepareStatement("SELECT SavedTreatmentItemId, SavedTreatmentDetail, Name, TypeT, RepeatT, Duration, RenderingInfo, Created, CreatedBy, Modified, ModifiedBy FROM savedtreatmentitem WHERE savedtreatmentdetail=?");
//			    ps = connection.prepareStatement("CALL GetPatientsByProvider(?)");
//				ps.setInt(1,PatientID);
//				ResultSet rs = ps.executeQuery();
//				while(rs.next())
//				{
//					//TreatmentItem p_eden = new TreatmentItem();
//					
//					PatientsCascade p_eden = new PatientsCascade(
//										rs.getInt(1),
//										rs.getString(2),
//										rs.getString(3),
//										rs.getString(4),
//										rs.getString(5),
//										rs.getInt(6),
//										rs.getInt(7),
//										rs.getString(8),
//										rs.getString(9),
//										rs.getString(10),
//										rs.getString(11)
//										);
//					t_items.add(p_eden);
//				}
//				
//				if (t_items.isEmpty()){
//					 throw new WebApplicationException(404);
//				}
//				else
//				{
//					return t_items;
//				}
			}  
				catch(Exception e)
				{
					e.printStackTrace();
					throw e;
				}
			finally{
					ps.close();
			        connection.close();
			}
	}	
		